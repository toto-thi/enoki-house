[
    {
        "id": "65217f725802e13e",
        "type": "tab",
        "label": "Flow 1 - Process Data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "05f58b1d7419cee3",
        "type": "tab",
        "label": "Flow 2 - Actuator Actions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "74cf56750d051bd0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ced685228dea91e6",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "enoki-bucket",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "86477a8174688b3a",
        "type": "mqtt in",
        "z": "65217f725802e13e",
        "name": "",
        "topic": "enoki/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "b6b4df813e5dc0b7",
                "417f28b32b0c1f7f"
            ]
        ]
    },
    {
        "id": "b6b4df813e5dc0b7",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "subscribe all topics",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 200,
        "wires": []
    },
    {
        "id": "7189bcf7b2b7aba9",
        "type": "influxdb out",
        "z": "65217f725802e13e",
        "influxdb": "ced685228dea91e6",
        "name": "influxdb",
        "measurement": "enoki_sensors",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "enoki-org",
        "bucket": "enoki-bucket",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "417f28b32b0c1f7f",
        "type": "function",
        "z": "65217f725802e13e",
        "name": "save data to InfluxDB",
        "func": "const topic = msg.topic.split(\"/\")[1];\n\nif (msg.payload && typeof msg.payload === \"object\") {\n    if (msg.payload.temperature && typeof msg.payload.temperature === \"number\") {\n        msg.payload = [\n            {\n                value: msg.payload.temperature \n            },\n            {\n                sensor: topic\n            }\n        ];\n        return msg;\n    } else {\n        return null;\n    }\n} else if (msg.payload && !isNaN(parseFloat(msg.payload))) {\n    // Handle raw numeric payloads\n    const value = parseFloat(msg.payload);\n    msg.payload = [\n        {\n            value: value \n        },\n        {\n            sensor: topic \n        }\n    ];\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "7189bcf7b2b7aba9",
                "55da307e8ec4fabc"
            ]
        ]
    },
    {
        "id": "55da307e8ec4fabc",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "InfluxDB Payload Preview",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 60,
        "wires": []
    },
    {
        "id": "e94100a1af917324",
        "type": "mqtt in",
        "z": "65217f725802e13e",
        "name": "",
        "topic": "enoki/actuators/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 340,
        "wires": [
            [
                "9fa9284f6f917885",
                "ef588a7598ecad79"
            ]
        ]
    },
    {
        "id": "9fa9284f6f917885",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "Subscribe all topic from action",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 420,
        "wires": []
    },
    {
        "id": "ef588a7598ecad79",
        "type": "function",
        "z": "65217f725802e13e",
        "name": "save actuators state to db",
        "func": "if (msg.payload && typeof msg.payload === \"object\") {\n    let action = msg.payload.action; \n    let sensorType = null;          \n    let value = null;               \n\n    if (\"temperature\" in msg.payload) {\n        sensorType = \"temperature\";\n        value = msg.payload.temperature;\n    } else if (\"humidity\" in msg.payload) {\n        sensorType = \"humidity\";\n        value = msg.payload.humidity;\n    } else if (\"co2\" in msg.payload) {\n        sensorType = \"co2\";\n        value = msg.payload.co2;\n    }\n\n    if (sensorType && value !== null) {\n        msg.payload = [\n            {\n                value: value // The numeric value (temperature, humidity, or co2)\n            },\n            {\n                sensor: sensorType, \n                action: action      \n            }\n        ];\n        return msg;\n    }\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "387dbc43f616933e",
                "ca92dc99904ebaf5"
            ]
        ]
    },
    {
        "id": "387dbc43f616933e",
        "type": "influxdb out",
        "z": "65217f725802e13e",
        "influxdb": "ced685228dea91e6",
        "name": "actuator data",
        "measurement": "actuator_states",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "enoki-org",
        "bucket": "enoki-bucket",
        "x": 660,
        "y": 340,
        "wires": []
    },
    {
        "id": "ca92dc99904ebaf5",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "InfluxDB Payload Preview",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 280,
        "wires": []
    },
    {
        "id": "67c156f13ea62e4a",
        "type": "mqtt in",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "60ccfa03de163a3f",
                "aa8cfb35bb2c6be6"
            ]
        ]
    },
    {
        "id": "60ccfa03de163a3f",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Temperature Control",
        "func": "let temperature = parseFloat(msg.payload);\n\n// Retrieve previous states from global variables\nlet heaterOn = global.get(\"heater_on\") || false;\nlet coolingOn = global.get(\"cooling_on\") || false;\nlet lastAction = global.get(\"lastTemperatureAction\") || \"idle\";\n\n// Define new action\nlet newAction = \"idle\";\n\n// Adjust temperature based on active systems\nif (heaterOn) {\n    temperature += 0.25; // Gradually increase temperature\n}\nif (coolingOn) {\n    temperature -= 0.25; // Gradually decrease temperature\n}\n\n// Ensure temperature stays within realistic bounds\nif (temperature > 50) temperature = 50;\nif (temperature < -10) temperature = -10;\n\n// Determine system behavior based on temperature\nif (temperature < 10 && !heaterOn) {\n    newAction = \"heater_on\";\n    heaterOn = true;\n    coolingOn = false;\n    global.set(\"heater_on\", true);\n    global.set(\"cooling_on\", false);\n} else if (temperature > 25 && !coolingOn) {\n    newAction = \"cooling_on\";\n    coolingOn = true;\n    heaterOn = false;\n    global.set(\"cooling_on\", true);\n    global.set(\"heater_on\", false);\n} else if (heaterOn && temperature >= 10) {\n    newAction = \"heater_off\";\n    heaterOn = false;\n    global.set(\"heater_on\", false);\n} else if (coolingOn && temperature <= 25) {\n    newAction = \"cooling_off\";\n    coolingOn = false;\n    global.set(\"cooling_on\", false);\n}\n\n// Avoid sending duplicate actions\nif (newAction !== lastAction) {\n    global.set(\"lastTemperatureAction\", newAction);\n\n    // Publish to MQTT for visualization\n    msg.payload = {\n        action: newAction,\n        temperature: temperature\n    };\n    node.send([msg, { topic: \"enoki/actuators/temperature\", payload: newAction }]);\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 160,
        "wires": [
            [
                "c67736f7e9b48cd1",
                "e0d3fe114f88f597"
            ]
        ]
    },
    {
        "id": "aa8cfb35bb2c6be6",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "sub temperature",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 240,
        "wires": []
    },
    {
        "id": "c67736f7e9b48cd1",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "Current Temp",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 240,
        "wires": []
    },
    {
        "id": "84b817dc21787b63",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Humidity Control",
        "func": "let humidity = parseFloat(msg.payload);\n\n// Retrieve previous states from global variables\nlet humidifierOn = global.get(\"humidifier_on\") || false;\nlet dehumidifierOn = global.get(\"dehumidifier_on\") || false;\nlet lastAction = global.get(\"lastHumidityAction\") || \"idle\";\n\n// Define new action\nlet newAction = \"idle\";\n\nif (humidifierOn) {\n    humidity += 1; // Gradually increase humidity\n}\nif (dehumidifierOn) {\n    humidity -= 1; // Gradually decrease humidity\n}\n\n// Ensure humidity stays within realistic bounds\nif (humidity > 100) humidity = 100;\nif (humidity < 0) humidity = 0;\n\n// Determine system behavior based on humidity\nif (humidity < 85 && !humidifierOn) {\n    newAction = \"humidifier_on\";\n    humidifierOn = true;\n    dehumidifierOn = false;\n    global.set(\"humidifier_on\", true);\n    global.set(\"dehumidifier_on\", false);\n} else if (humidity > 95 && !dehumidifierOn) {\n    newAction = \"dehumidifier_on\";\n    dehumidifierOn = true;\n    humidifierOn = false;\n    global.set(\"dehumidifier_on\", true);\n    global.set(\"humidifier_on\", false);\n} else if (humidifierOn && humidity >= 85) {\n    newAction = \"humidifier_off\";\n    humidifierOn = false;\n    global.set(\"humidifier_on\", false);\n} else if (dehumidifierOn && humidity <= 95) {\n    newAction = \"dehumidifier_off\";\n    dehumidifierOn = false;\n    global.set(\"dehumidifier_on\", false);\n}\n\n// Avoid sending duplicate actions\nif (newAction !== lastAction) {\n    global.set(\"lastHumidityAction\", newAction);\n    msg.payload = {\n        action: newAction,\n        humidity: humidity\n    };\n\n    node.send([msg, { topic: \"enoki/actuators/humidity\", payload: newAction }]);\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "5ff5b141b098917b",
                "fe2d96aca1b43c98"
            ]
        ]
    },
    {
        "id": "d3d49319e4ba0fb1",
        "type": "mqtt in",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/humidity",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 360,
        "wires": [
            [
                "43e0319ce008fa92",
                "84b817dc21787b63"
            ]
        ]
    },
    {
        "id": "5ff5b141b098917b",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "Current Humidity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 420,
        "wires": []
    },
    {
        "id": "43e0319ce008fa92",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "sub humidity",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "fe2d96aca1b43c98",
        "type": "mqtt out",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/actuators/humidity",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74cf56750d051bd0",
        "x": 690,
        "y": 360,
        "wires": []
    },
    {
        "id": "8cbb1d9b35b25ea3",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "CO2 Control",
        "func": "let co2 = parseFloat(msg.payload);\n\n// Retrieve previous states from global variables\nlet co2ProductionOn = global.get(\"co2_production_on\") || false;\nlet ventilationOn = global.get(\"ventilation_on\") || false;\nlet lastAction = global.get(\"lastCO2Action\") || \"idle\";\n\n// Define new action\nlet newAction = \"idle\";\n\n// Adjust CO2 based on active systems\nif (co2ProductionOn) {\n    co2 += 25; // Gradually increase CO2\n}\nif (ventilationOn) {\n    co2 -= 25; // Gradually decrease CO2\n}\n\n// Ensure CO2 stays within realistic bounds\nif (co2 > 2000) co2 = 2000;\nif (co2 < 0) co2 = 0;\n\n// Determine system behavior based on CO2 levels\nif (co2 < 400 && !co2ProductionOn) {\n    newAction = \"co2_production_on\";\n    co2ProductionOn = true;\n    ventilationOn = false;\n    global.set(\"co2_production_on\", true);\n    global.set(\"ventilation_on\", false);\n} else if (co2 > 1000 && !ventilationOn) {\n    newAction = \"ventilation_on\";\n    ventilationOn = true;\n    co2ProductionOn = false;\n    global.set(\"ventilation_on\", true);\n    global.set(\"co2_production_on\", false);\n} else if (co2ProductionOn && co2 >= 400) {\n    newAction = \"co2_production_off\";\n    co2ProductionOn = false;\n    global.set(\"co2_production_on\", false);\n} else if (ventilationOn && co2 <= 1000) {\n    newAction = \"ventilation_off\";\n    ventilationOn = false;\n    global.set(\"ventilation_on\", false);\n}\n\n// Avoid sending duplicate actions\nif (newAction !== lastAction) {\n    global.set(\"lastCO2Action\", newAction);\n    msg.payload = {\n        action: newAction,\n        co2: co2\n    };\n    node.send([msg, { topic: \"enoki/actuators/co2\", payload: newAction }]);\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "7390916ad97c599b",
                "9d392cc915d8bad4"
            ]
        ]
    },
    {
        "id": "69fe8bc16ae56232",
        "type": "mqtt in",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/co2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 500,
        "wires": [
            [
                "291a71c905a89b97",
                "8cbb1d9b35b25ea3"
            ]
        ]
    },
    {
        "id": "7390916ad97c599b",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "Current CO2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 580,
        "wires": []
    },
    {
        "id": "291a71c905a89b97",
        "type": "debug",
        "z": "05f58b1d7419cee3",
        "name": "sub CO2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 180,
        "y": 580,
        "wires": []
    },
    {
        "id": "9d392cc915d8bad4",
        "type": "mqtt out",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/actuators/co2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74cf56750d051bd0",
        "x": 680,
        "y": 500,
        "wires": []
    },
    {
        "id": "77e4f65bb7367d88",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Ventilation On",
        "func": "let co2 = parseFloat(msg.payload);\n\nif (global.get(\"co2_production_on\")) {\n    co2 += 50; // Gradually increase CO2\n}\nif (global.get(\"ventilation_on\")) {\n    co2 -= 50; // Gradually decrease CO2\n}\n\nif (co2 > 2000) co2 = 2000;\nif (co2 < 0) co2 = 0;\n\nmsg.payload = co2;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "5904bdd445285c39",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Ventilation Off",
        "func": "let co2 = parseFloat(msg.payload);\n\nif (global.get(\"ventilation_on\") && co2 <= 800) {\n    msg.payload = \"ventilation_off\";\n    global.set(\"ventilation_on\", false);\n    return msg;\n}\n\nif (global.get(\"co2_production_on\") && co2 >= 400) {\n    msg.payload = \"co2_production_off\";\n    global.set(\"co2_production_on\", false);\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "01a1874767581249",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Humidifier On",
        "func": "let humidity = parseFloat(msg.payload);\n\nif (global.get(\"humidifier_on\")) {\n    humidity += 2; // Gradually increase humidity\n}\nif (global.get(\"dehumidifier_on\")) {\n    humidity -= 2; // Gradually decrease humidity\n}\n\nif (humidity > 100) humidity = 100;\nif (humidity < 0) humidity = 0;\n\nmsg.payload = humidity;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "50240fb9d5b8967a",
        "type": "function",
        "z": "05f58b1d7419cee3",
        "name": "Humidifier Off",
        "func": "let humidity = parseFloat(msg.payload);\n\nif (global.get(\"humidifier_on\") && humidity >= 95) {\n    msg.payload = \"humidifier_off\";\n    global.set(\"humidifier_on\", false);\n    return msg;\n}\n\nif (global.get(\"dehumidifier_on\") && humidity <= 85) {\n    msg.payload = \"dehumidifier_off\";\n    global.set(\"dehumidifier_on\", false);\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "e0d3fe114f88f597",
        "type": "mqtt out",
        "z": "05f58b1d7419cee3",
        "name": "",
        "topic": "enoki/actuators/temperature",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74cf56750d051bd0",
        "x": 720,
        "y": 160,
        "wires": []
    },
    {
        "id": "84cb79988b3bf37f",
        "type": "inject",
        "z": "05f58b1d7419cee3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "388",
        "payloadType": "num",
        "x": 210,
        "y": 660,
        "wires": [
            [
                "8cbb1d9b35b25ea3"
            ]
        ]
    }
]