[
    {
        "id": "65217f725802e13e",
        "type": "tab",
        "label": "Flow 1 - Process Data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2108e6928f5f2f38",
        "type": "tab",
        "label": "Flow 2 - Actuator Actions",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29f30ea989ea8021",
        "type": "tab",
        "label": "Flow 3 - Actuator Notification",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "74cf56750d051bd0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ced685228dea91e6",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": 8086,
        "protocol": "http",
        "database": "enoki-bucket",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": 10,
        "rejectUnauthorized": true
    },
    {
        "id": "d884453a1c3fdf2e",
        "type": "telegram bot",
        "botname": "Enoki-bot",
        "usernames": "",
        "chatids": "6263441576",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "b99e071138a19155",
        "type": "mqtt in",
        "z": "65217f725802e13e",
        "name": "",
        "topic": "enoki/house_1/sensor/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "8fe858ed96002b44",
                "aee2bc35b3c06340"
            ]
        ]
    },
    {
        "id": "8fe858ed96002b44",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "Debug Raw Data from sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 180,
        "wires": []
    },
    {
        "id": "aee2bc35b3c06340",
        "type": "function",
        "z": "65217f725802e13e",
        "name": "Transform to InfluxDB",
        "func": "const metadata = msg.topic.split(\"/\")\nconst house = metadata[1];\nconst sensor = metadata[3];\nconst device = metadata[4];\nconst value = parseFloat(msg.payload);\n\nmsg.payload = [\n    { \n        value: value \n    },\n    { \n        house: house, \n        device: device, \n        sensor: sensor\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 100,
        "wires": [
            [
                "07b5553fac490fb8",
                "58826b4ef40b7ff8"
            ]
        ]
    },
    {
        "id": "07b5553fac490fb8",
        "type": "debug",
        "z": "65217f725802e13e",
        "name": "Debug Influxdb format",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 40,
        "wires": []
    },
    {
        "id": "58826b4ef40b7ff8",
        "type": "influxdb out",
        "z": "65217f725802e13e",
        "influxdb": "ced685228dea91e6",
        "name": "mushroom_db",
        "measurement": "sensor_data",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "enoki-org",
        "bucket": "enoki-bucket",
        "x": 680,
        "y": 100,
        "wires": []
    },
    {
        "id": "20e18699527beb9a",
        "type": "mqtt in",
        "z": "2108e6928f5f2f38",
        "name": "",
        "topic": "enoki/house_1/sensor/temperature/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "3e63cbbd437310e5"
            ]
        ]
    },
    {
        "id": "7edf66f3f47f1903",
        "type": "function",
        "z": "2108e6928f5f2f38",
        "name": "Calculate Avg Temperature",
        "func": "// Extract sensor values from topics\nconst deviceKeys = Object.keys(msg.payload).filter(key => key.startsWith(\"enoki/house_1/sensor/temperature/\"));\nconst sensorValues = deviceKeys.map(key => msg.payload[key]);\n\n// Calculate average temperature\nconst avgTemperature = sensorValues.reduce((sum, value) => sum + value, 0) / sensorValues.length;\n\nmsg.payload = {\n    avgTemparature: +parseFloat(avgTemperature).toFixed(2),\n    sensors: sensorValues,\n    raw: msg.payload\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "1f33efc70071406b"
            ]
        ]
    },
    {
        "id": "3e63cbbd437310e5",
        "type": "join",
        "z": "2108e6928f5f2f38",
        "name": "Temperature Sensors",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 230,
        "y": 120,
        "wires": [
            [
                "7edf66f3f47f1903"
            ]
        ]
    },
    {
        "id": "f3a1ed9c85191b76",
        "type": "mqtt out",
        "z": "2108e6928f5f2f38",
        "name": "",
        "topic": "enoki/house_1/actuators/actions",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74cf56750d051bd0",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "008ae6c434d1254b",
        "type": "mqtt in",
        "z": "2108e6928f5f2f38",
        "name": "",
        "topic": "enoki/house_1/sensor/humidity/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "7d4643ed400a30c3"
            ]
        ]
    },
    {
        "id": "7d4643ed400a30c3",
        "type": "join",
        "z": "2108e6928f5f2f38",
        "name": "Humidity Sensors",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "6ec7516a99fb454d"
            ]
        ]
    },
    {
        "id": "6ec7516a99fb454d",
        "type": "function",
        "z": "2108e6928f5f2f38",
        "name": "Calculate Avg Humidity",
        "func": "// Extract sensor values from topics\nconst deviceKeys = Object.keys(msg.payload).filter(key => key.startsWith(\"enoki/house_1/sensor/humidity/\"));\nconst sensorValues = deviceKeys.map(key => msg.payload[key]);\n\n// Calculate average humidity\nconst avgHumidity = sensorValues.reduce((sum, value) => sum + value, 0) / sensorValues.length;\n\nmsg.payload = {\n    avgHumidity: +parseFloat(avgHumidity).toFixed(2),\n    sensors: sensorValues,\n    raw: msg.payload\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 360,
        "wires": [
            [
                "1f33efc70071406b"
            ]
        ]
    },
    {
        "id": "01d3491d59174f06",
        "type": "debug",
        "z": "2108e6928f5f2f38",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 680,
        "wires": []
    },
    {
        "id": "c7883a9607155730",
        "type": "mqtt in",
        "z": "2108e6928f5f2f38",
        "name": "",
        "topic": "enoki/house_1/actuators/actions",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 620,
        "wires": [
            [
                "01d3491d59174f06"
            ]
        ]
    },
    {
        "id": "39aada93190454ad",
        "type": "mqtt in",
        "z": "2108e6928f5f2f38",
        "name": "",
        "topic": "enoki/house_1/sensor/co2/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 440,
        "wires": [
            [
                "a0261c120c126845"
            ]
        ]
    },
    {
        "id": "a0261c120c126845",
        "type": "join",
        "z": "2108e6928f5f2f38",
        "name": "CO2 Sensors",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "d38d55f5e44db6f0"
            ]
        ]
    },
    {
        "id": "d38d55f5e44db6f0",
        "type": "function",
        "z": "2108e6928f5f2f38",
        "name": "Calculate Avg CO2",
        "func": "// Extract sensor values from topics\nconst deviceKeys = Object.keys(msg.payload).filter(key => key.startsWith(\"enoki/house_1/sensor/co2/\"));\nconst sensorValues = deviceKeys.map(key => msg.payload[key]);\n\n// Calculate average CO2\nconst avgCO2 = sensorValues.reduce((sum, value) => sum + value, 0) / sensorValues.length;\n\nmsg.payload = {\n    avgCO2: +parseFloat(avgCO2).toFixed(2),\n    sensors: sensorValues,\n    raw: msg.payload\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "1f33efc70071406b"
            ]
        ]
    },
    {
        "id": "5741ec9f72c97110",
        "type": "inject",
        "z": "2108e6928f5f2f38",
        "name": "Test Controller",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"avgCO2\": 388}",
        "payloadType": "json",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "1f33efc70071406b"
            ]
        ]
    },
    {
        "id": "1f33efc70071406b",
        "type": "function",
        "z": "2108e6928f5f2f38",
        "name": "Actuator Controller",
        "func": "const thresholds = {\n    fan: { key: \"avgTemperature\", condition: (value) => value > 25 },\n    heater: { key: \"avgTemperature\", condition: (value) => value < 10 },\n    humidifier: { key: \"avgHumidity\", condition: (value) => value < 85 },\n    dehumidifier: { key: \"avgHumidity\", condition: (value) => value > 95 },\n    ventilation: { key: \"avgCO2\", condition: (value) => value > 1000 },\n    co2_production: { key: \"avgCO2\", condition: (value) => value < 400 }\n};\n\nlet actions = [];\n\nfor (let actuator in thresholds) {\n    const { key, condition } = thresholds[actuator];\n    const value = msg.payload[key]; \n\n    if (value !== undefined) {  \n        const lastState = flow.get(`${actuator}State`) || \"OFF\";\n        let newState = condition(value) ? \"ON\" : \"OFF\"; \n\n        if (newState !== lastState) {\n            flow.set(`${actuator}State`, newState);\n            actions.push({ \n                command: newState, \n                actuator, \n                value\n            });\n        }\n    }\n}\n\nif (actions.length > 0) {\n    msg.payload = { actions };\n    return msg;\n} \n\nreturn null; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 360,
        "wires": [
            [
                "f3a1ed9c85191b76"
            ]
        ]
    },
    {
        "id": "c86a844a86698b47",
        "type": "telegram sender",
        "z": "29f30ea989ea8021",
        "name": "",
        "bot": "d884453a1c3fdf2e",
        "haserroroutput": false,
        "outputs": 1,
        "x": 460,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6259f0a730e86137",
        "type": "telegram receiver",
        "z": "29f30ea989ea8021",
        "name": "",
        "bot": "d884453a1c3fdf2e",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 120,
        "y": 280,
        "wires": [
            [
                "0e4c039882feb9d5"
            ],
            []
        ]
    },
    {
        "id": "0e4c039882feb9d5",
        "type": "debug",
        "z": "29f30ea989ea8021",
        "name": "Msg on Telegram",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 280,
        "wires": []
    },
    {
        "id": "0809f44624d3f0ba",
        "type": "mqtt in",
        "z": "29f30ea989ea8021",
        "name": "",
        "topic": "enoki/house_1/actuators/actions",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "74cf56750d051bd0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "5fe1ee66f263250e"
            ]
        ]
    },
    {
        "id": "5fe1ee66f263250e",
        "type": "function",
        "z": "29f30ea989ea8021",
        "name": "Format Alert",
        "func": "const topicParts = msg.topic ? msg.topic.split(\"/\") : [];\nconst house = topicParts.length > 1 ? topicParts[1] : \"Unknown House\"; // Handle missing topic\n\nif (!msg.payload.actions || msg.payload.actions.length === 0) {\n    return null;\n}\n\nlet message = `🚨 Alert on Enoki House 🍄\\n`;\nmessage += `🏠 House: ${house}\\n`;\nmessage += `🚀 Actuator Updates:\\n\\n`;\n\nmsg.payload.actions.forEach(action => {\n    message += `(Current Value: ${action.value})\\n${\n        action.actuator.toUpperCase()} → ${action.command}\\n`;\n});\n\n\nmsg.payload = {\n    chatId: \"6263441576\", \n    type: \"message\",\n    content: message\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "426e60bf83b2c5f0",
                "c86a844a86698b47"
            ]
        ]
    },
    {
        "id": "426e60bf83b2c5f0",
        "type": "debug",
        "z": "29f30ea989ea8021",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 200,
        "wires": []
    }
]